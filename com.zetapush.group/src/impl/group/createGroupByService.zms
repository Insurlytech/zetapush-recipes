/**
 *
 */
macroscript createGroupByService(
	/** Group id */ @NotNull string id,
	/** Group name */ @NotNull string name,
	/** Group members */ @NotNull array members,
	/** Group metadata */ @NotNull map metadata,
	/** Group tags */ @NotNull array tags,
	/** Group service implementation */ @NotNull service<groups> zpService
) {
	/** Merge metadata */
	metadata += {
		createdAt: time:now(),
		type: metadata.type ?: DEFAULT_GROUP_TYPE
	};

	var existence = zpService.exists({
		group: id
	});

	var resource = str:join(':', __userKey, id);

	/** Avoid error if group already exist */
	if (!existence.exists) {
		/** Create group */
		zpService.createGroup({
			group: id,
			groupName: name
		});
	
		/** Allow members to list members */
		zpService.grant({
			action: 'LIST',
			group: id,
			resource: resource
		});
		
		/** Add initial users to the group */
		zpService.addUsers({
			group: id,
			users: members
		});

		/** Set group metadata */
		call zpRecipeUtils::setMetadata({ id, metadata }) hardFail;
		
		/** Set group tags */
		call zpRecipeUtils::setTags({ id, tags }) hardFail;
	}
	/** Get the created group */
	var response = call getGroupByService({
		id: id,
		zpService: zpService
	}) hardFail;
	/** Destructure response properties */
	var group = response.result.group;
	var userKey = __userKey;

	/** Execute all registered macros */
	sudo zpRecipeUtils::GLOBAL_OWNER zpRecipeUtils::zpServiceTrigger.trigger({
		event: EVENT__CREATE_GROUP,
		data: { group, userKey }
	});
} broadcast { group } on channel __selfName
