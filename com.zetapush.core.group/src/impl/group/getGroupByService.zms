/**
 * Get a group for a specific groups service
 */
macroscript core_group__getGroupByService(
	/** Group id */ @NotNull string id,
	/** Group service implementation */ @NotNull service<groups> zpService
) {
	const { groupName, owner, users } = zpService.groupUsers({ group: id });
	const group = new Group(
		id,
		zpService,
		groupName,
		owner,
		str:join(':', zpService, owner, id),
		users,
		{},
		[]
	);
	if (coll:size(group.members) > 0) {
		const userKeys = coll:set(group.members);
		const ApiObjectUserInfos = zpServiceUserDirectory.userInfo({ userKeys });
		group.members = usr:core_group__list_user_from_api_object(ApiObjectUserInfos);	
	}
	/** Get group metadata */
	const metadata = await zpRecipeUtils::getMetadata({ id });
	group.metadata = metadata.value;
	/** Get group tags */
	const tags = await zpRecipeUtils::getTags({ id });
	group.tags = tags.value;
} return { Group group } on channel __selfName
