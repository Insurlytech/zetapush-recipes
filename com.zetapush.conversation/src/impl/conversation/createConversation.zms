macroscript createConversation(
	@NotNull string id,
	@NotNull string name,
	@NotNull array members,
	@NotNull string owner,
	@NotNull array groups
) {
	var response = null;
	var targets = [];

	/** Create default group for conversation */
	response = sudo owner call zpRecipeGroup::createGroupByService({
		id, members, name: str:join('.', 'I18N', 'DEFAULT_GROUP_MEMBERS'), metadata: {}, tags: [], zpService: zpServiceGroups
	}) hardFail;
	
	/** Add default group to groups list*/
	groups += response.result.group;

	/** Insert conversation */
	@@(zpServiceDatabase) INSERT INTO ${CONVERSATION_TABLE} (id, name, createdAt, owner) VALUES (:{id}, :{name}, CURRENT_TIMESTAMP(), :{owner});

	/** Create attachment folder */
	sudo owner zpServiceFileSystem.mkdir({
		folder: CONVERSATION_ATTACHMENTS_PATH + id,
		parents: true
	});

	for group in groups {
		/** Add group to broadcast targets */
		targets += group.resource;
		/** Set correct permissions for all groups */
		call setConversationGrants({
			id,
			zpService: group.deploymentId
		}) hardFail;
	}

	/** Execute all registered macros */
	sudo zpRecipeUtils::GLOBAL_OWNER zpRecipeUtils::zpServiceTrigger.trigger({
		event: EVENT__CREATE_CONVERSATION,
		data: { id, name, members, owner, groups }
	});

	/** Store targets */
	sudo owner call zpRecipeUtils::setTargets({ id , targets }) hardFail;

	/** Get created conversation */
	response = call getConversation({ id, owner }) hardFail;
	/** Destructure response properties */
	var details = response.result.details;
	var group = response.result.group;
	var messages = response.result.messages;
	var unread = response.result.unread;

} broadcast(targets) { details, group, messages, unread } on channel __selfName
