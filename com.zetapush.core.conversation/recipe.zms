/**
 * ZetaPush Official Core Recipe
 * Provide conversations management APIs
 */
recipe com.zetapush.core.conversation 2.0.0;

// Import recipes

import recipe com.zetapush.core.utils 2.0.0 in zpRecipeUtils;
import recipe com.zetapush.core.group 2.0.0 in zpRecipeGroup;
import recipe com.zetapush.core.user 2.0.0 in zpRecipeUser;

// Table

const CONVERSATION_TABLE = 'conversation';
const COLUMN_CONVERSATION_UNREAD = 'unread';

const HISTORY_TABLE = 'history';
const COLUMN_HISTORY_OWNER = 'owner';
const COLUMN_HISTORY_NAME = 'name';
const COLUMN_HISTORY_CREATED_AT = 'createdAt';
const COLUMN_HISTORY_LATEST = 'latest';
const COLUMN_HISTORY_MEMBERS = 'members';
const COLUMN_HISTORY_GROUPS = 'groups';
const COLUMN_HISTORY_UNREAD = 'unread';

// File System

const CONVERSATION_ATTACHMENTS_PATH = '/conversations/attachments/';

// Context

const EVENT__ADD_CONVERSATION_MESSAGE = 'ZetaPushEvent__Conversation_AddConversationMessage';
const EVENT__INC_CONVERSATION_UNREAD = 'ZetaPushEvent__Conversation_IncConversationUnread';
const EVENT__CREATE_CONVERSATION = 'ZetaPushEvent__Conversation_CreateConversation';

// Conversation Content Type

const MESSAGE_TYPE_ATTACHMENT = 'attachment';
const MESSAGE_TYPE_EVENT = 'event';
const MESSAGE_TYPE_MARKUP = 'markup';
const MESSAGE_TYPE_WIDGET = 'widget';
const MESSAGE_TYPE_ACTION = 'action';

// Services declaration

/**
 * Public API (Client and Server side) macro service
 */
service zpServiceApiMacro = macro(__default) for 'src/api';
/**
 * Private API (Server side only) macro service
 */
service zpServiceImplMacro = macro(zpRecipeUtils::SERVICE_MACRO_IMPL_ID).forbiddenVerbs(__all) for 'src/impl';
/**
 * Conversation group service
 */
service zpServiceGroups = groups('cr_cnvrst_groups').options({
	groups_presence_owner: true,
	groups_presence_group: true
}).forbiddenVerbs(__all);
/**
 * SQL Database service
 */
service zpServiceDatabase = rdbms('cr_cnvrst_rdbms').forbiddenVerbs(__all);
/**
 * NoSQL Dataservice
 */
service zpServiceGda = gda('cr_cnvrst_gda').forbiddenVerbs(__all);
/**
 * Data Stack service
 */
service zpServiceStack = stack('cr_cnvrst_stack').forbiddenVerbs(__all);
/**
 * Elastic Search service
 */
service zpServiceSearch = search('cr_cnvrst_search').forbiddenVerbs(__all);
/**
 * File system service
 */
service zpServiceFileSystem = zpfs_hdfs('cr_cnvrst_hdfs').options({
	upload_thumbnails: "100,200"
}).forbiddenVerbs(__all);
