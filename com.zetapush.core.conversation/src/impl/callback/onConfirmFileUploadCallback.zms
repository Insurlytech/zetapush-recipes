/**
 *
 */
@zpRecipeFile::ConfirmFileUploadListener()
macroscript core_conversation__onConfirmFileUploadCallback(
	@NotNull map actions,
	@NotNull map file,
	@NotNull service<zpfs_hdfs> zpService
) {
	trace(#core_conversation__onConfirmFileUploadCallback, { actions, file });

	const { tags, type, name, metadata, creation, file: { guid, path }, owner } = file;

	var id = null;
	var resource = owner;

	if (str:len(path) > (str:len(CONVERSATION_ATTACHMENTS_PATH) + NUMBER_OF_CHARS_IN_CONVERSATION_ID)) {
		/** Parse file path to get conversation room id */
		id = str:substr(path, str:len(CONVERSATION_ATTACHMENTS_PATH), str:len(CONVERSATION_ATTACHMENTS_PATH) + NUMBER_OF_CHARS_IN_CONVERSATION_ID);
		/** Get conversation by attachment */
		const { room } = await getConversation({
			id,
			owner
		});
		/** Set room resource */
		resource = room.resource;
		/** Grant stat for the uploaded file */
		zpServiceGroups.grant({
			action: Verb_zpfs_hdfs_stat,
			group: id,
			resource: str:join(':', zpService, owner, path),
			owner
		});
		trace(#core_conversation__onConfirmFileUploadCallback, { room });
		/** Add attachment as conversation message */
		await addConversationMessage({
			room,
			type: MESSAGE_TYPE_ATTACHMENT,
			value: {
				guid,
				owner,
				path: str:join('/', room.metadata.attachments, guid)
			},
			metadata: {}
		}) loud;
	}	
} broadcast(resource) {
	string id,
	map actions,
	map file
} on channel __selfName
