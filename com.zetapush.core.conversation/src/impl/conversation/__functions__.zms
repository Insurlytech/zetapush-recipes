/**
 * Generate a unique conversation id
 */
function core_conversation__id() return str:substr(str:rnd36(CONVERSATION_ID_ENTROPY), 0, NUMBER_OF_CHARS_IN_CONVERSATION_ID)

/**
 * Generate a unique conversation id
 */
function core_conversation__message_suffix_id() return str:substr(str:rnd36(CONVERSATION_MESSAGE_ID_ENTROPY), 0, NUMBER_OF_CHARS_IN_CONVERSATION_MESSAGE_SUFFIX)

/**
 * Format a stored message
 */
function core_conversation__format_stored_message(stored) return {
	id: stored.__key,
	[COLUMN_STORAGE_AUTHOR]: stored[COLUMN_STORAGE_AUTHOR],
	[COLUMN_STORAGE_TYPE]: stored[COLUMN_STORAGE_TYPE],
	[COLUMN_STORAGE_VALUE]: stored[COLUMN_STORAGE_VALUE],
	[COLUMN_STORAGE_CREATED_AT]: stored[COLUMN_STORAGE_CREATED_AT],
	[COLUMN_STORAGE_METADATA]: stored[COLUMN_STORAGE_METADATA],
	[COLUMN_STORAGE_READERS]: stored[COLUMN_STORAGE_READERS],
	[COLUMN_STORAGE_TARGETS]: zpRecipeUtils::reduce_map_to_array(stored[COLUMN_STORAGE_TARGETS])
}

/**
 * Generate a unique conversation message key
 */
function core_conversation__message_key(container) {
	var createdAt = time:now();
	var now = time:fmt(createdAt, 'YMDHMSM');
	var key = container + now + usr:core_conversation__message_suffix_id();
} return { container, createdAt, now, key }

/**
 * Generate range limits for conversation
 */
function core_conversation__range(container) {
	var start = container + '00000000000000000' + '000';
	var stop = container + '90000000000000000' + '000';
} return { start, stop }

/**
 * Collection contains polyfill
 */
function core_conversation__contains(list, searched) {
	var found = false;
	for item in list {
		if (item == searched) {
			found = true;
		}
	}
} return found
