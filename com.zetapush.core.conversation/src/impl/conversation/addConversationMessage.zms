/**
 *
 */
macroscript core_conversation__addConversationMessage(
	@ValidConversationRoom map room,
	@ValidMessageType string type,
	@NotNull map message,
	@NotNull map metadata
) {
	// TODO Check permissions?
	/** Get message key */
	var { createdAt, now, key } = usr:core_conversation__message_key(room.id);
	/** Prepare data storage */
	var targets = [];
	var readers = {};
	for member in room.members {
		var { userKey } = member;
		targets += userKey;
		readers[userKey] = 0;
	}
	/** Store message */
	zpServiceGda.puts({
		rows: [{
			table: TABLE_CONVERSATION_STORAGE,
			rows:[{
				key,
				data: {
					[COLUMN_STORAGE_AUTHOR]: __userKey,
					[COLUMN_STORAGE_TYPE]: type,
					[COLUMN_STORAGE_MESSAGE]: message,
					[COLUMN_STORAGE_CREATED_AT]: createdAt,
					[COLUMN_STORAGE_METADATA]: metadata,
					[COLUMN_STORAGE_READERS]: readers,
					[COLUMN_STORAGE_TARGETS]: zpRecipeUtils::reduce_array_to_map(targets)
				}
			}]
		}],
		table: TABLE_CONVERSATION_STORAGE,
		owner: room.owner
	});
	/** Execute all registered macros */
	zpRecipeUtils::zpServiceTrigger.trigger({
		event: EVENT__ADD_CONVERSATION_MESSAGE,
		data: { type, message, createdAt, metadata, readers, targets }
	});
} broadcast {
	type, message, createdAt, metadata, readers, targets
} on channel __selfName